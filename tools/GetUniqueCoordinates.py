from logging import root
from pyexpat.errors import XML_ERROR_RECURSIVE_ENTITY_REF
from tkinter.font import ROMAN
import numpy as np
from PIL import Image
import cv2
import statistics, pprint, pathlib,sys
import colortheme

colors = {
    "BLACK"         : '\033[38;2;23;26;27m',
    "DARKBLUE"      : '\033[38;2;52;101;164m',
    "DARKGREEN"     : '\033[38;2;78;154;6m',
    "DARKCYAN"      : '\033[38;2;0;153;204m',
    "DARKRED"       : '\033[38;2;204;0;0m',
    "DARKMAGENTA"   : '\033[38;2;117;80;123m',
    "DARKYELLOW"    : '\033[38;2;196;160;0m',
    "GRAY"          : '\033[38;2;186;189;182m',
    "DARKGRAY"      : '\033[38;2;136;138;133m',
    "BLUE"          : '\033[38;2;114;159;207m',
    "GREEN"         : '\033[38;2;138;226;52m',
    "CYAN"          : '\033[38;2;51;181;229m',
    "RED"           : '\033[38;2;239;41;41m',
    "MAGENTA"       : '\033[38;2;173;127;168m',
    "YELLOW"        : '\033[38;2;237;212;0m',
    "WHITE"         : '\033[38;2;238;238;236m',
}

PROJECT_DIR = pathlib.Path('/home/starsand/DVM-AutoRuneEnhance/')
sys.path.append(PROJECT_DIR.as_posix())
sys.path.append(PROJECT_DIR.joinpath('tools').as_posix())
sys.path.append(PROJECT_DIR.joinpath('lib', 'python3.10', 'site-packages').as_posix())

WORKING_DIR = PROJECT_DIR.joinpath('work')       
WORKING_PICTURE_SAVE_DIR = WORKING_DIR.joinpath('img')

RESOURCE_DIR = PROJECT_DIR.joinpath('resources')
TEMPLATE_IMG_DIR = RESOURCE_DIR.joinpath('img', 'template')

RESULT_DIR = PROJECT_DIR.joinpath('result')


class colorPrints():
    def red(self, coloredtext="",whitetext=""):
        return print(f'\033[38;2;239;41;41m{coloredtext}\033[0m{whitetext}')

    def yellow(self, coloredtext="",whitetext=""):
        return print(f'\033[38;2;237;212;0m{coloredtext}\033[0m{whitetext}')

    def green(self, coloredtext="",whitetext=""):
        return print(f'\033[38;2;138;226;52m{coloredtext}\033[0m{whitetext}')

def PointDraw(points, pointColor=(0, 0, 255), title=""):
    import tempfile, pathlib
    import ScreenCapture_pillow as ScreenCapture
    with tempfile.NamedTemporaryFile( dir=WORKING_PICTURE_SAVE_DIR.as_posix(), suffix='.png' ) as tmp_origin:
        sc = ScreenCapture.ScreenCapture()
        sc.grab(mode='color', filepath=tmp_origin.name)
        
        origin = cv2.imread(tmp_origin.name)
        #template = cv2.imread(templatePath)
        
        putpoint = ""
        for point in points:
            cv2.circle(origin, point, 1, pointColor, -1)
            putpoint = point
        
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(origin, title, putpoint, font, 1, pointColor, 2)
        
        cv2.imshow('',origin)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        
    pathlib.Path(tmp_origin.name).unlink(missing_ok=True)

cp = colorPrints()

def GetUniqueCoordinates(rootArray, templateImagePath, permissiveRate=50):
    
    #+ 準備
    #? インデックス付きrootArrayを作成する  
    #?rootArrayWithIndex = []
    #?for i, item in enumerate(rootArray):
    #?    rootArrayWithIndex.append( {i: item} )
    
    #! 確定した配列を格納する変数。
    FixedCoordinates = []    
    CopiedRootArray = rootArray
    #- permissive の値を取得する
    #* テンプレート画像を読み込み、幅と高さを取得する
    Image = cv2.imread(templateImagePath, 0)
    w, h = Image.shape[0:2]
    hPermissive = int(h * (permissiveRate / 100) )
    wPermissive = int(w * (permissiveRate / 100) )
    
    #+ 仮の基準用Y軸を設定する。
    #- 初回は値がないので、RootArrayの一番最初のY軸の値とする。
    tmpYcriterion = None
    if tmpYcriterion is None:
        tmpYcriterion = rootArray[0][1]
    else:
        pass
    
    YGroupLastIndex = -1
    #print(rootArray)
    #tmprootArray = np.array(rootArray)
    #rootArray = np.sort(tmprootArray, axis=1)
    #(rootArray[0][1])
    #rootArray = rootArray.tolist()
    #import pyperclip
    
    #pyperclip.copy(str(rootArray))
    
    #print()
    YloopTotal = 0
    SameFixedCoordsCount = 0
    while True:
        cp.green('仮のY軸の値を基準に、RootArrayを走査して仮のY軸のグループを作成する。\n',f'YGroupLastIndex: {YGroupLastIndex}')
        print()
        #+ 仮のY軸の値を基準に、RootArrayを走査して仮のY軸のグループを作成する。
        #- tmpYcriterionから見て +- permissive(テンプレート画像の50%の長さ)以内に収まる値を仮のYグループと見立てる。
        tmpYGroup = []
        testTmpYGroup = []
        #tmpYcriterion = rootArray[YGroupLastIndex + 1][1]
        for coords in rootArray[YGroupLastIndex + 1:int(len(rootArray) + 1)]:
            if  coords[1] <= ( tmpYcriterion + hPermissive ) and \
                coords[1] >= ( tmpYcriterion - hPermissive ):
                
                tmpYGroup.append(coords[1])
                #? testcode
                testTmpYGroup.append(coords)
                #input(f'{tmpYcriterion}, {coords[1]}')
            else:
                pass
        
        #PointDraw(testTmpYGroup, title='testTmpYGroup')
        
        #+ 正式なY軸グループを決める。
        #- 仮Y軸グループ中のmean high(中央値)を正式Y軸グループの基準値とする。
        try:
            cp.red('tmpYGroup mean high ',statistics.median_high(tmpYGroup))
        except:
            print('quitPoint')
            quit()
        Ycriterion = statistics.median_high(tmpYGroup)
        
        #- 正式なY軸グループを取得する
        YGroup = []
        YGroupForMedians = []
        XloopTotal = 0
        for coords in rootArray[YGroupLastIndex + 1:int(len(rootArray) + 1)]:
            if  coords[1] <= ( Ycriterion + hPermissive ) and \
                coords[1] >= ( Ycriterion - hPermissive ):
                
                #+ 正式なY軸グループとして追加する
                YGroup.append(coords)
                
                #* 中央値検索用の配列を作成する。
                YGroupForMedians.append(coords[1])
                
                #- 次のグループのために、インデックスもを取得する。飛び飛びになってしまう時は変更しないようにする。
                #?cp.green('before if statement:', f'{rootArray.index(coords)}, {YGroupLastIndex}')
                #?print()
                if rootArray.index(coords) > YGroupLastIndex + 1:
                    #?cp.yellow('trueStatement', f'{rootArray.index(coords)}, {YGroupLastIndex}')
                    break
                    #?print()
                else:
                    YGroupLastIndex = rootArray.index(coords)
                    #?cp.red('else statement', f'{rootArray.index(coords)}, {YGroupLastIndex}')
                    #?print()
            else:
                #?cp.red('top else statement', f'{rootArray.index(coords)}, {YGroupLastIndex}')
                pass
                #?print()
        
        #PointDraw(YGroup, pointColor=(255, 0, 255), title='YGroup')
        
        print(YGroupLastIndex)
        print()
        #* 中央値を取得。正式Y軸グループ中のY軸の値。
        YGroupMedian = statistics.median_high(YGroupForMedians)
        cp.yellow('YGroup Median ',statistics.median_high(YGroupForMedians))
        pprint.pprint(YGroup)
        
        #- 正式なY軸グループの中から中央値を持つ群を抽出する。
        YGroupMedians = [ x for x in YGroup if x[1] == YGroupMedian]
        print(f'YGroupMedians: {YGroupMedians}')
        
        #PointDraw(rootArray)
        #PointDraw(YGroupMedians, pointColor=(255, 255, 0), title='YGroupMedians')
        print()
        
        #+ x軸のグループを作る。(y軸のグループの中で)
        #- 仮のx軸基準値を取得する(x軸は複数のグループが想定される)
        
        #* 仮の基準値はYGroupMediansの配列中一番最初の値とする。
        cp.red(f'Minimum x(in YGroupMedians): ', np.sort(YGroupMedians, axis=0)[0][0] )
        print('YGroupMedians', YGroupMedians)
        print()
        tmpXcriterion = int( np.sort(YGroupMedians, axis=0)[0][0] )
        #? print(YGroup[0], tmpXcriterion+wPermissive, tmpXcriterion-wPermissive, len(YGroup))
        print(tmpXcriterion)
        print()
        while True:
            #* (a)仮の基準値 tmpXcriterion から +- wPermissive の値を持つインデックスを取得する。
            #? print( [ i for i, x in enumerate(YGroup) if x[0] < (tmpXcriterion + wPermissive) and x[0] > (tmpXcriterion - wPermissive) ] )
            tmpXGroupIndexes = [ i for i, x in enumerate(YGroupMedians) if x[0] < (tmpXcriterion + wPermissive) and x[0] > (tmpXcriterion - wPermissive) ]
            cp.red('(a)仮の基準値 tmpXcriterion から +- wPermissive の値を持つインデックスを取得する。\n',f'tmpXcriterion: {tmpXcriterion}, tmpXGroupIndexes: {tmpXGroupIndexes}')
            
            #* (b)基準値から外れたインデックスを格納する。
            tmpXGroupIndexesOutofCriterion = [ i for i, x in enumerate(YGroupMedians) if not( x[0] < (tmpXcriterion + wPermissive) and x[0] > (tmpXcriterion - wPermissive) )]
            cp.red('(b)基準値から外れたインデックスを格納する。\n',tmpXGroupIndexesOutofCriterion)
            
            #- 基準値から外れたインデックスの数ループを回す。
            
            #cp.green('Current index: ',f'{tmpXGroupIndexesOutofCriterion[i]} {i} times')
            
            #* (c) (a)で取得したインデックスから、YGroupMediansにあるx軸の実際の値を取得し、その中央値を正式なX軸の基準値(Xcriterion)とする。
            tmparr = []
            for idx in tmpXGroupIndexes:
                tmparr.append(YGroupMedians[idx][0])
            #print(tmparr)
            
            Xcriterion = statistics.median_high(tmparr)
            cp.red(
                '(c) (a)で取得したインデックスから、YGroupMediansにあるx軸の実際の値を取得し、その中央値を正式なX軸の基準値(Xcriterion)とする。\n',
                Xcriterion
            )
            
            #* (d) YGroupMedians の配列から Xcriterion +- wPermissiveの値を持つインデックスを取得する。
            XGroupIndexes = [ i for i, x in enumerate(YGroupMedians) if x[0] < (Xcriterion + wPermissive) and x[0] > (Xcriterion - wPermissive) ]
            cp.yellow('(d) YGroupMedians の配列から Xcriterion +- wPermissiveの値を持つインデックスを取得する。\n', XGroupIndexes)
            
            #* (e) (d)で取得したインデックスから、YGroupMediansにある実際のx軸の値を取得し、その中央値を取得する。
            arr = []
            for idx in XGroupIndexes:
                arr.append(YGroupMedians[idx][0])
            
            XGroupMedian = statistics.median_high(arr)
            cp.yellow('(e) (d)で取得したインデックスから、YGroupMediansにある実際のx軸の値を取得し、その中央値を取得する。\n', XGroupMedian)
            
            #* (f) YGroupMediansの配列から (e)で取得したインデックスの値を持つ配列を取得する。
            XGroupMediansInYMedianGroup = [ v for v in YGroupMedians if v[0] == XGroupMedian ]
            cp.yellow('(f) YGroupMediansの配列から (e)で取得したインデックスの値を持つ配列を取得する。\n', XGroupMediansInYMedianGroup)
            
            #? test code
            #?try:
            #?    Xcriterion == Xcriterion_befere
            #?except:
            #?    pass
            #?else:
            #?    if Xcriterion == Xcriterion_befere:
            #?        input('same criterion')
                
            #* (g) (f)の配列が複数検出された時(テンプレートを複数回分けて適用した場合は起こりうる。)先頭の配列[0]で確定とする。
            #- すでに同一の値が含まれている場合は無視する(上手なアルゴリズムが思いつかなかった。)
            if XGroupMediansInYMedianGroup[0] in FixedCoordinates:
                pass
            else:
                FixedCoordinates.append(XGroupMediansInYMedianGroup[0])
                
            # (h) YGroupMediansからXGroupIndexes(d)の値を取り除く。
            XGroupIndexes.reverse()
            YGroupMediansCopy = YGroupMedians
            for idx in XGroupIndexes :
                #CopiedRootArray = [v for v in CopiedRootArray if v != YGroupMedians[idx] ]
                YGroupMedians.pop(idx)
                cp.yellow('(h) YGroupMediansからXGroupIndexes(d)の値を取り除く。\n', f'current idx: {idx}\nremain coords: {YGroupMedians}')
            #input(f'current YGroupMedians: {YGroupMedians}')
            
            # (i) 基準値から外れたインデックスで採れる値を、仮のx基準値に代入する
            
            print(f'before try statement YGroupMedians: {YGroupMedians}')
            print()
            XloopTotal += 1
            try:
                tmpXcriterion = int( np.sort(YGroupMedians, axis=0)[0][0] ) #とりあえず動いた方のコード
                #tmpXcriterion = YGroupMediansCopy[tmpXGroupIndexesOutofCriterion.pop(0)][0]
                #input(tmpXcriterion)
            except IndexError:
                currentCoordinateCount = len(FixedCoordinates)
                # IndexErrorは基本的に正常終了
                break
            
            currentCoordinateCount = len(FixedCoordinates)
            #? test codes
            #! y軸グループからx軸のグループを取得するループ。ここまで
            print(YGroupMedians, '\noutofcriterion', tmpXGroupIndexesOutofCriterion)
            print('fixedCoordinates',FixedCoordinates,"\ncounts:", len(FixedCoordinates))
            print(YGroupLastIndex)
            print()
        print('fixedCoordinates',FixedCoordinates,"\ncounts:", len(FixedCoordinates))
        # 仮のY軸基準値を取得する(ループ用)
        print(f'rootArray length: {len(rootArray)}, YGroupLastIndex: {YGroupLastIndex}, {hex(YGroupLastIndex)}')
        
        try:
            tmpYcriterion = rootArray[YGroupLastIndex + 1][1]
        except IndexError:
            break
        
        # ループ終了判定無理やり
        if len(FixedCoordinates) == currentCoordinateCount:
            SameFixedCoordsCount += 1
        else:
            pass
        
        if SameFixedCoordsCount >= 3:
            continue
        else:
            pass
    #print(FixedCoordinates)
    #PointDraw(FixedCoordinates,title='FixedCoorinates')
    return FixedCoordinates

#RootArray = [[552, 579], [1392, 579], [1393, 579], [1394, 579], [551, 580], [552, 580], [553, 580], [554, 580], [792, 580], [793, 580], [794, 580], [912, 580], [913, 580], [914, 580], [1032, 580], [1033, 580], [1152, 580], [1153, 580], [1154, 580], [1391, 580], [1392, 580], [1393, 580], [1394, 580], [1395, 580], [1396, 580], [550, 581], [551, 581], [552, 581], [553, 581], [554, 581], [555, 581], [791, 581], [792, 581], [793, 581], [794, 581], [795, 581], [911, 581], [912, 581], [913, 581], [914, 581], [915, 581], [1031, 581], [1032, 581], [1033, 581], [1034, 581], [1151, 581], [1152, 581], [1153, 581], [1154, 581], [1155, 581], [1390, 581], [1391, 581], [1392, 581], [1393, 581], [1394, 581], [1395, 581], [1396, 581], [1397, 581], [549, 582], [550, 582], [551, 582], [552, 582], [553, 582], [554, 582], [555, 582], [790, 582], [791, 582], [792, 582], [793, 582], [794, 582], [795, 582], [910, 582], [911, 582], [912, 582], [913, 582], [914, 582], [915, 582], [1031, 582], [1032, 582], [1033, 582], [1034, 582], [1035, 582], [1150, 582], [1151, 582], [1152, 582], [1153, 582], [1154, 582], [1155, 582], [1156, 582], [1389, 582], [1390, 582], [1391, 582], [1392, 582], [1393, 582], [1394, 582], [1395, 582], [1396, 582], [1397, 582], [1398, 582], [550, 583], [551, 583], [552, 583], [553, 583], [554, 583], [791, 583], [792, 583], [793, 583], [794, 583], [795, 583], [911, 583], [912, 583], [913, 583], [914, 583], [915, 583], [1031, 583], [1032, 583], [1033, 583], [1034, 583], [1151, 583], [1152, 583], [1153, 583], [1154, 583], [1155, 583], [1390, 583], [1391, 583], [1392, 583], [1393, 583], [1394, 583], [1395, 583], [1396, 583], [1397, 583], [551, 584], [552, 584], [553, 584], [791, 584], [792, 584], [793, 584], [794, 584], [912, 584], [913, 584], [914, 584], [1032, 584], [1033, 584], [1152, 584], [1153, 584], [1154, 584], [1391, 584], [1392, 584], [1393, 584], [1394, 584], [1395, 584], [1396, 584], [1392, 585], [1393, 585], [1394, 585], [1032, 699], [1033, 699], [1034, 699], [1272, 699], [1273, 699], [1274, 699], [552, 700], [671, 700], [672, 700], [673, 700], [792, 700], [793, 700], [794, 700], [913, 700], [1031, 700], [1032, 700], [1033, 700], [1034, 700], [1035, 700], [1153, 700], [1154, 700], [1271, 700], [1272, 700], [1273, 700], [1274, 700], [1275, 700], [1276, 700], [1393, 700], [1394, 700], [550, 701], [551, 701], [552, 701], [553, 701], [554, 701], [670, 701], [671, 701], [672, 701], [673, 701], [674, 701], [675, 701], [790, 701], [791, 701], [792, 701], [793, 701], [794, 701], [795, 701], [911, 701], [912, 701], [913, 701], [914, 701], [915, 701], [1030, 701], [1031, 701], [1032, 701], [1033, 701], [1034, 701], [1035, 701], [1036, 701], [1151, 701], [1152, 701], [1153, 701], [1154, 701], [1155, 701], [1270, 701], [1271, 701], [1272, 701], [1273, 701], [1274, 701], [1275, 701], [1276, 701], [1277, 701], [1392, 701], [1393, 701], [1394, 701], [1395, 701], [549, 702], [550, 702], [551, 702], [552, 702], [553, 702], [554, 702], [555, 702], [669, 702], [670, 702], [671, 702], [672, 702], [673, 702], [674, 702], [675, 702], [790, 702], [791, 702], [792, 702], [793, 702], [794, 702], [795, 702], [796, 702], [910, 702], [911, 702], [912, 702], [913, 702], [914, 702], [915, 702], [1029, 702], [1030, 702], [1031, 702], [1032, 702], [1033, 702], [1034, 702], [1035, 702], [1036, 702], [1037, 702], [1150, 702], [1151, 702], [1152, 702], [1153, 702], [1154, 702], [1155, 702], [1156, 702], [1269, 702], [1270, 702], [1271, 702], [1272, 702], [1273, 702], [1274, 702], [1275, 702], [1276, 702], [1277, 702], [1278, 702], [1391, 702], [1392, 702], [1393, 702], [1394, 702], [1395, 702], [1396, 702], [550, 703], [551, 703], [552, 703], [553, 703], [554, 703], [670, 703], [671, 703], [672, 703], [673, 703], [674, 703], [675, 703], [790, 703], [791, 703], [792, 703], [793, 703], [794, 703], [795, 703], [911, 703], [912, 703], [913, 703], [914, 703], [915, 703], [1029, 703], [1030, 703], [1031, 703], [1032, 703], [1033, 703], [1034, 703], [1035, 703], [1036, 703], [1151, 703], [1152, 703], [1153, 703], [1154, 703], [1155, 703], [1270, 703], [1271, 703], [1272, 703], [1273, 703], [1274, 703], [1275, 703], [1276, 703], [1277, 703], [1391, 703], [1392, 703], [1393, 703], [1394, 703], [1395, 703], [1396, 703], [551, 704], [552, 704], [553, 704], [670, 704], [671, 704], [672, 704], [673, 704], [674, 704], [790, 704], [791, 704], [792, 704], [793, 704], [794, 704], [911, 704], [912, 704], [913, 704], [914, 704], [1030, 704], [1031, 704], [1032, 704], [1033, 704], [1034, 704], [1035, 704], [1152, 704], [1153, 704], [1154, 704], [1270, 704], [1271, 704], [1272, 704], [1273, 704], [1274, 704], [1275, 704], [1276, 704], [1392, 704], [1393, 704], [1394, 704], [1395, 704], [671, 705], [672, 705], [673, 705], [674, 705], [791, 705], [792, 705], [793, 705], [794, 705], [1031, 705], [1032, 705], [1033, 705], [1034, 705], [1153, 705], [1271, 705], [1272, 705], [1273, 705], [1274, 705], [1275, 705], [1276, 705], [1272, 706], [1273, 706], [1274, 706], [792, 819], [793, 819], [912, 819], [913, 819], [1393, 819], [1394, 819], [791, 820], [792, 820], [793, 820], [794, 820], [795, 820], [911, 820], [912, 820], [913, 820], [914, 820], [1273, 820], [1274, 820], [1391, 820], [1392, 820], [1393, 820], [1394, 820], [1395, 820], [551, 821], [552, 821], [553, 821], [789, 821], [790, 821], [791, 821], [792, 821], [793, 821], [794, 821], [795, 821], [796, 821], [910, 821], [911, 821], [912, 821], [913, 821], [914, 821], [915, 821], [916, 821], [1151, 821], [1152, 821], [1153, 821], [1154, 821], [1155, 821], [1271, 821], [1272, 821], [1273, 821], [1274, 821], [1275, 821], [1390, 821], [1391, 821], [1392, 821], [1393, 821], [1394, 821], [1395, 821], [1396, 821], [1397, 821], [551, 822], [552, 822], [553, 822], [554, 822], [788, 822], [789, 822], [790, 822], [791, 822], [792, 822], [793, 822], [794, 822], [795, 822], [796, 822], [797, 822], [909, 822], [910, 822], [911, 822], [912, 822], [913, 822], [914, 822], [915, 822], [916, 822], [917, 822], [1150, 822], [1151, 822], [1152, 822], [1153, 822], [1154, 822], [1155, 822], [1156, 822], [1271, 822], [1272, 822], [1273, 822], [1274, 822], [1275, 822], [1276, 822], [1389, 822], [1390, 822], [1391, 822], [1392, 822], [1393, 822], [1394, 822], [1395, 822], [1396, 822], [1397, 822], [1398, 822], [551, 823], [552, 823], [553, 823], [554, 823], [789, 823], [790, 823], [791, 823], [792, 823], [793, 823], [794, 823], [795, 823], [796, 823], [909, 823], [910, 823], [911, 823], [912, 823], [913, 823], [914, 823], [915, 823], [916, 823], [1151, 823], [1152, 823], [1153, 823], [1154, 823], [1155, 823], [1271, 823], [1272, 823], [1273, 823], [1274, 823], [1275, 823], [1276, 823], [1390, 823], [1391, 823], [1392, 823], [1393, 823], [1394, 823], [1395, 823], [1396, 823], [1397, 823], [551, 824], [552, 824], [553, 824], [789, 824], [790, 824], [791, 824], [792, 824], [793, 824], [794, 824], [795, 824], [796, 824], [910, 824], [911, 824], [912, 824], [913, 824], [914, 824], [915, 824], [1151, 824], [1152, 824], [1153, 824], [1154, 824], [1272, 824], [1273, 824], [1274, 824], [1275, 824], [1391, 824], [1392, 824], [1393, 824], [1394, 824], [1395, 824], [1396, 824], [790, 825], [791, 825], [792, 825], [793, 825], [794, 825], [795, 825], [911, 825], [912, 825], [913, 825], [914, 825], [1153, 825], [1273, 825], [1391, 825], [1392, 825], [1393, 825], [1394, 825], [1395, 825], [791, 826], [792, 826], [793, 826], [794, 826], [912, 826], [913, 826], [1393, 826], [1393, 939], [1394, 939], [1392, 940], [1393, 940], [1394, 940], [1395, 940], [551, 941], [552, 941], [553, 941], [671, 941], [672, 941], [673, 941], [674, 941], [791, 941], [792, 941], [793, 941], [794, 941], [1152, 941], [1153, 941], [1154, 941], [1155, 941], [1272, 941], [1273, 941], [1274, 941], [1391, 941], [1392, 941], [1393, 941], [1394, 941], [1395, 941], [1396, 941], [1397, 941], [550, 942], [551, 942], [552, 942], [553, 942], [554, 942], [670, 942], [671, 942], [672, 942], [673, 942], [674, 942], [675, 942], [790, 942], [791, 942], [792, 942], [793, 942], [794, 942], [795, 942], [1151, 942], [1152, 942], [1153, 942], [1154, 942], [1155, 942], [1271, 942], [1272, 942], [1273, 942], [1274, 942], [1275, 942], [1390, 942], [1391, 942], [1392, 942], [1393, 942], [1394, 942], [1395, 942], [1396, 942], [1397, 942], [1398, 942], [550, 943], [551, 943], [552, 943], [553, 943], [554, 943], [670, 943], [671, 943], [672, 943], [673, 943], [674, 943], [790, 943], [791, 943], [792, 943], [793, 943], [794, 943], [1151, 943], [1152, 943], [1153, 943], [1154, 943], [1155, 943], [1271, 943], [1272, 943], [1273, 943], [1274, 943], [1275, 943], [1390, 943], [1391, 943], [1392, 943], [1393, 943], [1394, 943], [1395, 943], [1396, 943], [1397, 943], [551, 944], [552, 944], [553, 944], [671, 944], [672, 944], [673, 944], [674, 944], [791, 944], [792, 944], [793, 944], [794, 944], [1151, 944], [1152, 944], [1153, 944], [1154, 944], [1155, 944], [1272, 944], [1273, 944], [1274, 944], [1390, 944], [1391, 944], [1392, 944], [1393, 944], [1394, 944], [1395, 944], [1396, 944], [1397, 944], [672, 945], [792, 945], [793, 945], [1152, 945], [1153, 945], [1273, 945], [1391, 945], [1392, 945], [1393, 945], [1394, 945], [1395, 945], [1396, 945], [1392, 946], [1393, 946], [1394, 946], [1395, 946], [792, 1059], [793, 1059], [791, 1060], [792, 1060], [793, 1060], [794, 1060], [551, 1061], [552, 1061], [553, 1061], [554, 1061], [671, 1061], [672, 1061], [673, 1061], [674, 1061], [790, 1061], [791, 1061], [792, 1061], [793, 1061], [794, 1061], [795, 1061], [1032, 1061], [1033, 1061], [1034, 1061], [1153, 1061], [1392, 1061], [1393, 1061], [1394, 1061], [550, 1062], [551, 1062], [552, 1062], [553, 1062], [554, 1062], [555, 1062], [670, 1062], [671, 1062], [672, 1062], [673, 1062], [674, 1062], [675, 1062], [789, 1062], [790, 1062], [791, 1062], [792, 1062], [793, 1062], [794, 1062], [795, 1062], [796, 1062], [1031, 1062], [1032, 1062], [1033, 1062], [1034, 1062], [1035, 1062], [1152, 1062], [1153, 1062], [1154, 1062], [1272, 1062], [1273, 1062], [1274, 1062], [1391, 1062], [1392, 1062], [1393, 1062], [1394, 1062], [1395, 1062], [550, 1063], [551, 1063], [552, 1063], [553, 1063], [554, 1063], [555, 1063], [670, 1063], [671, 1063], [672, 1063], [673, 1063], [674, 1063], [675, 1063], [788, 1063], [789, 1063], [790, 1063], [791, 1063], [792, 1063], [793, 1063], [794, 1063], [795, 1063], [796, 1063], [797, 1063], [1031, 1063], [1032, 1063], [1033, 1063], [1034, 1063], [1035, 1063], [1152, 1063], [1153, 1063], [1154, 1063], [1272, 1063], [1273, 1063], [1274, 1063], [1391, 1063], [1392, 1063], [1393, 1063], [1394, 1063], [1395, 1063], [550, 1064], [551, 1064], [552, 1064], [553, 1064], [554, 1064], [670, 1064], [671, 1064], [672, 1064], [673, 1064], [674, 1064], [675, 1064], [789, 1064], [790, 1064], [791, 1064], [792, 1064], [793, 1064], [794, 1064], [795, 1064], [796, 1064], [1031, 1064], [1032, 1064], [1033, 1064], [1034, 1064], [1152, 1064], [1153, 1064], [1154, 1064], [1272, 1064], [1273, 1064], [1274, 1064], [1392, 1064], [1393, 1064], [1394, 1064], [1395, 1064], [551, 1065], [552, 1065], [553, 1065], [670, 1065], [671, 1065], [672, 1065], [673, 1065], [674, 1065], [789, 1065], [790, 1065], [791, 1065], [792, 1065], [793, 1065], [794, 1065], [795, 1065], [1032, 1065], [1033, 1065], [1393, 1065], [1394, 1065], [672, 1066], [790, 1066], [791, 1066], [792, 1066], [793, 1066], [794, 1066], [792, 1067], [793, 1067], [790, 575], [791, 575], [792, 575], [1031, 575], [1032, 575], [789, 576], [790, 576], [791, 576], [792, 576], [793, 576], [794, 576], [911, 576], [912, 576], [1030, 576], [1031, 576], [1032, 576], [1033, 576], [788, 577], [789, 577], [790, 577], [791, 577], [792, 577], [793, 577], [794, 577], [795, 577], [910, 577], [911, 577], [912, 577], [913, 577], [1029, 577], [1030, 577], [1031, 577], [1032, 577], [1033, 577], [1034, 577], [787, 578], [788, 578], [789, 578], [790, 578], [791, 578], [792, 578], [793, 578], [794, 578], [795, 578], [909, 578], [910, 578], [911, 578], [912, 578], [913, 578], [914, 578], [1028, 578], [1029, 578], [1030, 578], [1031, 578], [1032, 578], [1033, 578], [1034, 578], [1035, 578], [786, 579], [787, 579], [788, 579], [789, 579], [790, 579], [791, 579], [792, 579], [793, 579], [794, 579], [795, 579], [796, 579], [908, 579], [909, 579], [910, 579], [911, 579], [912, 579], [913, 579], [914, 579], [915, 579], [1027, 579], [1028, 579], [1029, 579], [1030, 579], [1031, 579], [1032, 579], [1033, 579], [1034, 579], [1035, 579], [1036, 579], [1271, 579], [1272, 579], [1273, 579], [1392, 579], [551, 580], [785, 580], [786, 580], [787, 580], [788, 580], [789, 580], [790, 580], [791, 580], [792, 580], [793, 580], [794, 580], [795, 580], [796, 580], [797, 580], [798, 580], [907, 580], [908, 580], [909, 580], [910, 580], [911, 580], [912, 580], [913, 580], [914, 580], [915, 580], [916, 580], [1026, 580], [1027, 580], [1028, 580], [1029, 580], [1030, 580], [1031, 580], [1032, 580], [1033, 580], [1034, 580], [1035, 580], [1036, 580], [1151, 580], [1152, 580], [1270, 580], [1271, 580], [1272, 580], [1273, 580], [1274, 580], [1391, 580], [1392, 580], [1393, 580], [550, 581], [551, 581], [552, 581], [784, 581], [785, 581], [786, 581], [787, 581], [788, 581], [789, 581], [790, 581], [791, 581], [792, 581], [793, 581], [794, 581], [795, 581], [796, 581], [797, 581], [798, 581], [907, 581], [908, 581], [909, 581], [910, 581], [911, 581], [912, 581], [913, 581], [914, 581], [915, 581], [916, 581], [1026, 581], [1027, 581], [1028, 581], [1029, 581], [1030, 581], [1031, 581], [1032, 581], [1033, 581], [1034, 581], [1035, 581], [1036, 581], [1037, 581], [1150, 581], [1151, 581], [1152, 581], [1153, 581], [1269, 581], [1270, 581], [1271, 581], [1272, 581], [1273, 581], [1274, 581], [1275, 581], [1390, 581], [1391, 581], [1392, 581], [1393, 581], [1394, 581], [550, 582], [551, 582], [552, 582], [785, 582], [786, 582], [787, 582], [788, 582], [789, 582], [790, 582], [791, 582], [792, 582], [793, 582], [794, 582], [795, 582], [796, 582], [797, 582], [907, 582], [908, 582], [909, 582], [910, 582], [911, 582], [912, 582], [913, 582], [914, 582], [915, 582], [916, 582], [1027, 582], [1028, 582], [1029, 582], [1030, 582], [1031, 582], [1032, 582], [1033, 582], [1034, 582], [1035, 582], [1036, 582], [1151, 582], [1152, 582], [1270, 582], [1271, 582], [1272, 582], [1273, 582], [1274, 582], [1390, 582], [1391, 582], [1392, 582], [1393, 582], [786, 583], [787, 583], [788, 583], [789, 583], [790, 583], [791, 583], [792, 583], [793, 583], [794, 583], [795, 583], [796, 583], [908, 583], [909, 583], [910, 583], [911, 583], [912, 583], [913, 583], [914, 583], [1027, 583], [1028, 583], [1029, 583], [1030, 583], [1031, 583], [1032, 583], [1033, 583], [1034, 583], [1035, 583], [1271, 583], [1272, 583], [1273, 583], [1392, 583], [787, 584], [788, 584], [789, 584], [790, 584], [791, 584], [792, 584], [793, 584], [794, 584], [795, 584], [909, 584], [910, 584], [911, 584], [912, 584], [913, 584], [914, 584], [1028, 584], [1029, 584], [1030, 584], [1031, 584], [1032, 584], [1033, 584], [1034, 584], [1035, 584], [1272, 584], [788, 585], [789, 585], [790, 585], [791, 585], [792, 585], [793, 585], [794, 585], [795, 585], [910, 585], [911, 585], [912, 585], [913, 585], [1029, 585], [1030, 585], [1031, 585], [1032, 585], [1033, 585], [1034, 585], [789, 586], [790, 586], [791, 586], [792, 586], [793, 586], [794, 586], [1030, 586], [1031, 586], [1032, 586], [1033, 586], [791, 587], [792, 587], [1271, 699], [1272, 699], [1273, 699], [670, 700], [671, 700], [791, 700], [1030, 700], [1031, 700], [1032, 700], [1033, 700], [1270, 700], [1271, 700], [1272, 700], [1273, 700], [1274, 700], [551, 701], [670, 701], [671, 701], [672, 701], [790, 701], [791, 701], [792, 701], [911, 701], [1030, 701], [1031, 701], [1032, 701], [1033, 701], [1151, 701], [1152, 701], [1269, 701], [1270, 701], [1271, 701], [1272, 701], [1273, 701], [1274, 701], [1392, 701], [670, 702], [671, 702], [791, 702], [1030, 702], [1031, 702], [1032, 702], [1033, 702], [1270, 702], [1271, 702], [1272, 702], [1273, 702], [1274, 702], [1031, 703], [1032, 703], [1271, 703], [1272, 703], [1273, 703], [551, 817], [549, 818], [550, 818], [551, 818], [552, 818], [548, 819], [549, 819], [550, 819], [551, 819], [552, 819], [553, 819], [671, 819], [672, 819], [790, 819], [791, 819], [792, 819], [1392, 819], [548, 820], [549, 820], [550, 820], [551, 820], [552, 820], [553, 820], [554, 820], [670, 820], [671, 820], [672, 820], [673, 820], [789, 820], [790, 820], [791, 820], [792, 820], [793, 820], [910, 820], [911, 820], [912, 820], [1391, 820], [1392, 820], [1393, 820], [547, 821], [548, 821], [549, 821], [550, 821], [551, 821], [552, 821], [553, 821], [554, 821], [555, 821], [669, 821], [670, 821], [671, 821], [672, 821], [673, 821], [789, 821], [790, 821], [791, 821], [792, 821], [793, 821], [909, 821], [910, 821], [911, 821], [912, 821], [913, 821], [1152, 821], [1271, 821], [1272, 821], [1390, 821], [1391, 821], [1392, 821], [1393, 821], [1394, 821], [547, 822], [548, 822], [549, 822], [550, 822], [551, 822], [552, 822], [553, 822], [554, 822], [669, 822], [670, 822], [671, 822], [672, 822], [673, 822], [789, 822], [790, 822], [791, 822], [792, 822], [793, 822], [910, 822], [911, 822], [912, 822], [913, 822], [1272, 822], [1390, 822], [1391, 822], [1392, 822], [1393, 822], [1394, 822], [548, 823], [549, 823], [550, 823], [551, 823], [552, 823], [553, 823], [554, 823], [670, 823], [671, 823], [672, 823], [790, 823], [791, 823], [792, 823], [910, 823], [911, 823], [912, 823], [1391, 823], [1392, 823], [1393, 823], [548, 824], [549, 824], [550, 824], [551, 824], [552, 824], [553, 824], [670, 824], [671, 824], [672, 824], [791, 824], [549, 825], [550, 825], [551, 825], [552, 825], [1392, 939], [1391, 940], [1392, 940], [1393, 940], [671, 941], [791, 941], [1390, 941], [1391, 941], [1392, 941], [1393, 941], [1394, 941], [1390, 942], [1391, 942], [1392, 942], [1393, 942], [1394, 942], [1391, 943], [1392, 943], [1393, 943], [1392, 944], [1151, 1058], [1152, 1058], [1153, 1058], [1272, 1058], [1273, 1058], [791, 1059], [1150, 1059], [1151, 1059], [1152, 1059], [1153, 1059], [1154, 1059], [1271, 1059], [1272, 1059], [1273, 1059], [1274, 1059], [790, 1060], [791, 1060], [792, 1060], [1149, 1060], [1150, 1060], [1151, 1060], [1152, 1060], [1153, 1060], [1154, 1060], [1270, 1060], [1271, 1060], [1272, 1060], [1273, 1060], [1274, 1060], [550, 1061], [551, 1061], [670, 1061], [671, 1061], [789, 1061], [790, 1061], [791, 1061], [792, 1061], [793, 1061], [1149, 1061], [1150, 1061], [1151, 1061], [1152, 1061], [1153, 1061], [1154, 1061], [1155, 1061], [1269, 1061], [1270, 1061], [1271, 1061], [1272, 1061], [1273, 1061], [1274, 1061], [1275, 1061], [550, 1062], [551, 1062], [670, 1062], [671, 1062], [789, 1062], [790, 1062], [791, 1062], [792, 1062], [793, 1062], [1148, 1062], [1149, 1062], [1150, 1062], [1151, 1062], [1152, 1062], [1153, 1062], [1154, 1062], [1155, 1062], [1269, 1062], [1270, 1062], [1271, 1062], [1272, 1062], [1273, 1062], [1274, 1062], [1275, 1062], [671, 1063], [789, 1063], [790, 1063], [791, 1063], [792, 1063], [793, 1063], [1149, 1063], [1150, 1063], [1151, 1063], [1152, 1063], [1153, 1063], [1154, 1063], [1155, 1063], [1269, 1063], [1270, 1063], [1271, 1063], [1272, 1063], [1273, 1063], [1274, 1063], [1275, 1063], [790, 1064], [791, 1064], [792, 1064], [1149, 1064], [1150, 1064], [1151, 1064], [1152, 1064], [1153, 1064], [1154, 1064], [1270, 1064], [1271, 1064], [1272, 1064], [1273, 1064], [1274, 1064], [1150, 1065], [1151, 1065], [1152, 1065], [1153, 1065], [1271, 1065], [1272, 1065], [1273, 1065]]
#RootArray = [[761, 1005], [762, 1005], [760, 1006], [761, 1006], [762, 1006], [763, 1006], [1002, 1006], [760, 1007], [761, 1007], [762, 1007], [763, 1007], [761, 1008], [762, 1008], [1122, 1125], [1242, 1125], [1001, 1126], [1002, 1126], [1003, 1126], [1121, 1126], [1122, 1126], [1123, 1126], [1241, 1126], [1242, 1126], [1243, 1126], [1001, 1127], [1002, 1127], [1003, 1127], [1121, 1127], [1122, 1127], [1123, 1127], [1241, 1127], [1242, 1127], [1243, 1127], [1001, 1128], [1002, 1128], [1121, 1128], [1122, 1128], [1123, 1128], [1241, 1128], [1242, 1128], [1243, 1128]]
#templatePath = '/home/starsand/DVM-AutoRuneEnhance/resources/img/template/runelist/frame1.png'

#print( GetUniqueCoordinates(rootArray=RootArray, templateImagePath=templatePath, permissiveRate=50) )